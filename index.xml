<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WongSSH Knowledge on</title><link>https://kb.wongssh.cf/</link><description>Recent content in WongSSH Knowledge on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://kb.wongssh.cf/index.xml" rel="self" type="application/rss+xml"/><item><title>DES</title><link>https://kb.wongssh.cf/crypto/AES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/AES/</guid><description>加密 AES要求密钥长度为128位，具体加密流程图如下：
上图展示了AES加密的整体流程，接下来，我们简单介绍每一层的作用：
密钥加法层 使用密钥编排得到的子密钥与输入明文$x$进行XOR异或计算 字节代换层 使用具有特殊数学性质的查找表对数据进行非线性变换，保证对单个状态的修改可以迅速传播到整个数据路径中 扩散层 ShiftRows 行移位变化 在位级别进行数据置换 MixColumn 列混淆变化是一个[[crypto/concept/混淆与扩散#混淆（Confusion）|混淆]]操作，合并了长度为 4 字节的分组 一个更具可视化的展示图如下：</description></item><item><title>DES</title><link>https://kb.wongssh.cf/crypto/DES/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/DES/</guid><description>[!warning] 警告
DES算法在目前已经不具有安全性，我们可以使用硬件快速爆破DES密钥。且DES在加密效率上只有高效的硬件实现而没有高效的软件实现，不推荐在现代基础设施上使用此加密算法。
本页面主要介绍DES算法，DES是一种使用 56 位密钥(实际上，我们一般看到 64 位的密钥中有 8 位校验位无法参与加密)对 64 位长分组进行加密的密码。
加密 其具体加密给出的流程图如下:
上述步骤可用文字表述如下:
明文被分解成以 64 bit 为一组的数据 将 64 bit 为一组的明文 $x$ 使用 [[crypto/concept/初始置换与逆置换|初始置换]] $IP(x)$ 进行处理 将置换后的结果分为左右两部分，每一部分长度为 32 bit，分别记为$L_0$、$R_0$ 将右侧 $L_0$ 部分(32 bit) 与经过 [[crypto/concept/DES密钥编排|密钥编排]](Key schedule) 后的 48 bit 密钥输入 f 函数 将 [[crypto/concept/F函数|f函数]] 输出结果与左侧$R_0$进行异或获得的结果记为$R_1$ 将原有输入 $R_0$ 直接记为 $L_1$ 我们将上述 3 - 6 步流程重复 16 轮，最后获得结果进行 [[crypto/concept/初始置换与逆置换|初始逆置换]]输出密文。</description></item><item><title>F函数</title><link>https://kb.wongssh.cf/crypto/concept/F%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/concept/F%E5%87%BD%E6%95%B0/</guid><description>f函数的处理流程图如下：
其中，参数含义为： $R_{i-1}$ 上一轮加密获得的右半部分 32 bit $k_i$ [[crypto/concept/DES密钥编排|密钥编排]]获得的 48 bit 密钥
当获得 32 bit 的 $R_{i-1}$ 时，我们发现长度显然与 $k_i$ 的长度不符，所以我们需要拓展 $R_{i-1}$ ，故而使用了$E(R_{i-1})$ [[crypto/concept/E置换|扩展置换]]。</description></item><item><title>S-盒</title><link>https://kb.wongssh.cf/crypto/concept/S-%E7%9B%92/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/concept/S-%E7%9B%92/</guid><description>在[[crypto/concept/F函数|F函数]]结构图内，我们发现 S盒 具有特定的编号，原因是每一个 S盒 都有特定的查找表，此表将 6 bit 的输入转换为 4 bit 的输出。
一个简单的查找示例如下:
假如我们需要将第一分组内的110010数据输入 S-盒，根据规则，此数据应由$s_1$盒进行处理，我们首先选择此数据的最高位和最低位构成10，计算此数据等于2，我们需要查询 $s_1$ 盒内的第 2 行，接下来，我们计算其他位的数据1001，计算结果为9，则查询$s_1$表格内的第 9 列，最终获得结果。</description></item><item><title>初始置换与逆置换</title><link>https://kb.wongssh.cf/crypto/concept/%E5%88%9D%E5%A7%8B%E7%BD%AE%E6%8D%A2%E4%B8%8E%E9%80%86%E7%BD%AE%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/concept/%E5%88%9D%E5%A7%8B%E7%BD%AE%E6%8D%A2%E4%B8%8E%E9%80%86%E7%BD%AE%E6%8D%A2/</guid><description>IP置换 $IP(x)$ 与 IP逆置换 $IP^{-1}(x)$ 用于 DES 的明文处理的第一步和密文处理的最后一步。
此过程只是简单的数据位交换，对于 DES 的安全性并没有提高。
其过程可以使用下图简单的进行表示：
下表给出了初始置换 $IP$ 的映射表格：
58 50 42 34 26 18 10 2 60 52 44 36 28 20 12 4 62 54 46 38 30 22 14 6 64 56 48 40 32 24 16 8 57 49 41 33 25 17 9 1 59 51 43 35 27 19 11 3 61 53 45 37 29 21 13 5 63 55 47 39 31 23 15 7 此映射表格从左至右、从上至下，依次表示每一个位对于的置换后的位置。假如我们需要置换第 10 位，我们可以简单的数表格，得到第 10 位应当置换到第 52 位。</description></item><item><title>密码学根节点</title><link>https://kb.wongssh.cf/crypto/root/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/root/</guid><description>本文为密码学根节点，包含以下内容:
[[crypto/DES|DES]] [[crypto/AES|AES]] RSA 本节点在写作过程中，主要参考了以下书目:
《深入浅出密码学》 《图解密码学技术》</description></item><item><title>密钥编排</title><link>https://kb.wongssh.cf/crypto/concept/DES%E5%AF%86%E9%92%A5%E7%BC%96%E6%8E%92/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/concept/DES%E5%AF%86%E9%92%A5%E7%BC%96%E6%8E%92/</guid><description>密钥编排接受 64 bit 长度的密钥（实际长度为 56 bit ）将其生成 16 轮加密流程中使用的 48 bit 密钥。结构图如下：
我们首先使用 PC-1 去除校验位并进行密码重排，使用的表格如下：
将获得的 56 bit 的输出分为 $C_0$ 和 $D_0$ 部分，接下来我们使用$LS_i$函数进行移位操作，具体规定如下：</description></item><item><title>扩展置换E</title><link>https://kb.wongssh.cf/crypto/concept/E%E7%BD%AE%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/concept/E%E7%BD%AE%E6%8D%A2/</guid><description>$E(R_{i-1})$ 拓展置换的目的是将 32 bit 的 $R_{i-1}$输入扩展为 48 bit
置换的示意图如下：
完整的置换表格可以参考下表：
通过表格，我们可以发现我们复用了32、4、8、12、16、20、24、28、5、9、13、17、21、25、29、1位的数据，共计 16 位，实现了 32 bit 到 48 bit 的扩展置换。</description></item><item><title>混淆与扩散</title><link>https://kb.wongssh.cf/crypto/concept/%E6%B7%B7%E6%B7%86%E4%B8%8E%E6%89%A9%E6%95%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/concept/%E6%B7%B7%E6%B7%86%E4%B8%8E%E6%89%A9%E6%95%A3/</guid><description>混淆（Confusion） 此操作是一种使密钥盒密文之间关系尽可能模糊的加密操作，最常用的方法是替换
扩散（Diffusion） 是一种为了隐藏明文的统计属性而将一个明文符号的影响扩散到多个密文符号的加密操作，最常用的方法是置换</description></item><item><title>置换P</title><link>https://kb.wongssh.cf/crypto/concept/%E7%BD%AE%E6%8D%A2P/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kb.wongssh.cf/crypto/concept/%E7%BD%AE%E6%8D%A2P/</guid><description>置换P 的作用是将 8 个 [[crypto/concept/S-盒|S-盒]] 内的数据进行置换，将[[crypto/concept/混淆与扩散#扩散（Diffusion）|扩散]]引入DES加密。
置换P 仍旧采用了简单的表格，如下：</description></item></channel></rss>